AdminType: registration | conflict
TranslatedData:
  en: string
  fr: string
  code: string
OTPSettingsData:
  type: "otp"
  value:
    ttl: number
DeliverySettingsData:
  type: "delivery"
  note: should have at least one of the provided attributes
  value:
    conflict_types: TranslatedData[]
    package_types: TranslatedData[]
    search_radius: number representing the radius to search a driver in second
    ttl: number representing the delay within which a driver can accept a delivery
sponsorData:
  sponsor:
    id: string
    code: string
    name: string
    phone: string
  sponsored: number
registrationData:
  age: string
  carInfos: File
  firstName: string
  email: string
  gender: M | F
  lang: string
  lastName: string
  password: string
  phoneNumber: string
  sponsorCode: string

/users/drivers:
  action: get drivers close to a location
  type: get
  body:
    from: locationData
    by: double
    internal: boolean
  response: userData[]
conflict-manager:
  /delivery/conflict/assign-driver:
    action: assign an internal driver to a conflicting delivery
    type: post
    body:
      id: string representing the conflict Id
      driverId: string
    response:
      assigned: boolean
  /delivery/conflict/archive:
    action: archive a conflicting delivery
    type: post
    body:
      id: string representing the conflict Id
    response:
      archived: boolean

registration-manager:
  /driver/register-intern:
    action: create an internal driver (mostly used to solve conflict)
    type: post
    body: registrationData
    response:
      id: string representing the identifier of the newly added driver

  /driver/update-registration:
    action: update a driver registration
    type: post
    body: registrationData
    response:
      updated: boolean

  /driver/handle-registration:
    action: handle a new driver registration demand
    type: post
    body:
      id: string representing the registration identifier
    
  /driver/validate-registration:
    action: validate a driver registration
    type: post
    body:
      id: string representing the registration Id
    response:
      valdiated: boolean

  /driver/reject-registration:
    action: reject a driver registration
    type: post
    body:
      id: string representing the registration Id
    response:
      rejected: boolean

  /driver/registrations:
    action: get new driver registrations
    type: get
    queryString:
      maxPageSize: number
      name: string representing the full name of the driver to match
      skip: number
    response:
      nextPageToken: string
      refreshed: boolean
      results: registrationData[]

  /driver/all-settled:
    action: get the registrations you've settled
    type: get
    queryString:
      from: date after which the (validation or rejection) has been done (YYYY-MM-DD)
      maxPageSize: number
      name: string representing the full name of the driver to match
      skip: number
      to: date before which the (validation or rejection) has been done (YYYY-MM-DD)
      status: string representing the registration status (validated | rejected) default to pending
    response:
      nextPageToken: string
      refreshed: boolean
      results: registrationData[]


admin-manager:
  /admin/block-user:
    action: "block a user account"
    type: post
    body:
      id: string

  /admin/activate-user:
    action: "activate a user account"
    type: post
    body:
      id: string

  /admin/revoke-all:
    action: "invalidate all users token"
    type: post

  /admin/new-admin:
    action: "create a new administrator"
    type: post
    body:
      type: AdminType
      phoneNumber: string
      password: string
      email: string

  /admin/update-settings:
    action: "update system settings"
    type: post
    body: OTPSettingsData || DeliverySettingsData

  /user/all:
    action: get all users in the platform
    type: get
    queryString:
      role: string
      maxPageSize: number
    headers:
      page-token: string representing the token of the requested page
    response:
      nextPageToken: string
      results: userData[]

  /delivery/all:
    action: get all deliveries in the platform
    type: get
    queryString:
      from: string representing the date from which we want to query (YYYY-MM-DD)
      status: string representing the status of the deliveries
      maxPageSize: number
      to: string representing the date after which we want to query (YYYY-MM-DD)
    headers:
      page-token: string representing the token of the requested page
    response:
      nextPageToken: string
      results: deliveryData[]

  /delivery/analytics:
    action: get the count of deliveries per status within a period
    type: get
    queryString:
      from: string representing the date from which we want to query (YYYY-MM-DD)
      to: string representing the date after which we want to query (YYYY-MM-DD)
    response:
      results:
        archived: number
        cancelled: number
        conflicting: number
        ongoing: number
        terminated: number
        total: number

  /sponsor/create:
    action: create a new sponsor
    type: post
    body:
      code: string
      phone: string
      name: string
    response:
      created: boolean

  /sponsor/ranking:
    action: provide the list of sponsors sorted by number of mentored users
    type: get
    queryString:
      maxPageSize: number
      skip: the number of item to skip
    headers:
      page-token: string representing the token of the requested page
    response:
      nextPageToken: string
      results: sponsorData[]

  /sponsor/enrolled:
    action: provide the list of users mentored by a sponsor
    type: get
    queryString:
      maxPageSize: number
      skip: the number of item to skip
      id: string representing the identifier of the sponsor
    headers:
      page-token: string representing the token of the requested page
    response:
      nextPageToken: string
      results: shortUserData[]

  /bundle/new-bundle:
    action: "create new bundle"
    type: post
    body:
      bonus: double
      point: double
      unitPrice: double

  /bundle/infos:
    action: "get bundle infos"
    type: get
    body:
      id: string
    response:
      title: string
      bonus: double
      point: double
      unitPrice: double
      price: double
      gain: double

  /bundle/:
    action: "get all bundles"
    type: get
    body:
    response:
      data:
        id: string
        bonus: double
        point: double
        unitPrice: double
        price: double
        gain: double

  /bundle/update:
    action: "update bundle"
    type: post
    body:
      id: string
      bonus: double
      point: double
      unitPrice: double
    response:
      message: string

  /bundle/delete:
    action: "delete bundle"
    type: post
    body:
      id: string

  /transaction/payment-history:
    action: "lists payments within a given time interval"
    type: get
    query:
      page: double
      limit: double
    body:
      startDate: Date
      endDate: Date
      type: string
    response:
      total: double
      data: 
        amount: double
        bonus: double
        date: string
        point: double
        avatar: string
        firstName: string
        lastName: string
  /transaction/recharge-infos:
    action: "gives information on the sum of payments"
    type: get
    body:
    response:
      solde: double
      bonus: double
      point: double
  /transaction/handle-bonus:
    action: "manages the addition and withdrawal of bonuses"
    type: post
    body:
    response: